

using exec() has unpredictable results

Using a non-current full episode has it return different formats for each act
Can probably be manuvered around.

rtmpe probably requires the swf file and the html page that embedded it.
Should try http whenever possible.


FFMPEG is stupid easy
http://stackoverflow.com/questions/15186500/howto-merge-two-avi-files-using-ffmpeg
http://stackoverflow.com/questions/7333232/concatenate-two-mp4-files-using-ffmpeg

This contains info on how to concatenate:
https://github.com/fluent-ffmpeg/node-fluent-ffmpeg

---
mergeToFile(filename, tmpdir): concatenate multiple inputs

Use the input and mergeToFile methods on a command to concatenate multiple inputs to a single output file. The mergeToFile needs a temporary folder as its second argument.

ffmpeg('/path/to/part1.avi')
  .input('/path/to/part2.avi')
  .input('/path/to/part2.avi')
  .on('error', function(err) {
    console.log('An error occurred: ' + err.message);
  })
  .on('end', function() {
    console.log('Merging finished !');
  })
  .mergeToFile('/path/to/merged.avi', '/path/to/tempDir');
---

I found this insanely helpful tutorial for getting ffprobe installed on osx via brew:
http://www.renevolution.com/how-to-install-ffmpeg-on-mac-os-x/

So, rebuilding with this:
brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-frei0r --with-libass --with-libvo-aacenc --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theora --with-tools


---
Issue:
i don't think it's really concatentating, I think it's just completely re-encoding.
Which is bad.

Apparently, I have to be using the concat filter, but fluent ffmpeg doesn't support that:
https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/issues/376

The proper and fast way to concat:
https://trac.ffmpeg.org/wiki/Concatenate

Yes!
This works: ffmpeg -f concat -i <(for f in ./*.wav; do echo "file '$PWD/$f'"; done) -c copy output.wav

It appears that this won't work unless this:
http://unix.stackexchange.com/questions/157541/parenthesis-works-in-bash-shell-itself-but-not-in-bash-script

So, maybe I shouldn't depend on extglobbing...

So, maybe can try:
ffmpeg -f concat -i <(find . -name '*.wav' -printf "file '$PWD/%p'\n") -c copy output.wav


That won't work, because subshell can't...
OK, but, maybe if I...


OK, I'm learning a ton.
Here's a good example:
sh -c "cat <(ls -l)"
OK, this sould work:
sh -c "ls -l | cat"

So, just refactor...

This works, assuming that it is invoked with sh -c ""
sh -c "for f in ./*.mp4; do echo \"file '$PWD/$f'\"; done"

With the important part being to print ' properly...

THIS IS INTERESTING I SHOULD BLOG ABOUT IT
And in general, how to fix <() in non interactive shells

---
Interesting:
http://shapeshed.com/command-line-utilities-with-nodejs/
How I will probably invoke bash, with environment:
http://stackoverflow.com/questions/7464036/node-js-shell-script-and-arguments
Using exec(), because it lets you just do one string for process invokation.

But, I'm pretty sure I want the full bash environment.

Excellent example of how to execure a shell script with node.js:
http://www.dzone.com/snippets/execute-unix-command-nodejs


---

FFMPEG metadata:
http://www.benfarrell.com/2012/07/23/injecting-metadata-with-ffmpeg-and-node-js/
^ This worked!
